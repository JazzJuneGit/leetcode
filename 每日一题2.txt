今天开始做中等题
不知道我可不可以，有点忐忑
之前没补的题解还是得补写一下

2.两数相加
在创建新节点上出了点问题
创建新节点时，应使用
ListNode* p=nullptr;
p=new ListNode(sum);
这里p不为空后，可以用p->next=new ListNode(sum);创建下一个节点
代码如下：
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int sum=0,flag=0;
        ListNode* result=nullptr,*p=nullptr;
        while(l1!=nullptr&&l2!=nullptr)
        {
            sum=(l1->val+l2->val+flag)%10;
            flag=(l1->val+l2->val+flag)/10;
            if(!result)
                p= result=new ListNode(sum);
            else{
                p->next=new ListNode(sum);
                p=p->next;
            }
            l1=l1->next;
            l2=l2->next;
        }
        while(l1!=nullptr)
        {
            sum=(l1->val+flag)%10;
            flag=(l1->val+flag)/10;
            p->next=new ListNode(sum);
            p=p->next;
            l1=l1->next;
        }
        while(l2!=nullptr)
        {
            sum=(l2->val+flag)%10;
            flag=(l2->val+flag)/10;
            p->next=new ListNode(sum);
            p=p->next;
            l2=l2->next;
        }
        if(flag)
            p->next=new ListNode(flag);
        return result;
    }
};
并不简洁
可以像题解一样简化一下代码
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *head = nullptr, *tail = nullptr;
        int carry = 0;
        while (l1 || l2) {
            int n1 = l1 ? l1->val: 0;
            int n2 = l2 ? l2->val: 0;
            int sum = n1 + n2 + carry;
            if (!head) {
                head = tail = new ListNode(sum % 10);
            } else {
                tail->next = new ListNode(sum % 10);
                tail = tail->next;
            }
            carry = sum / 10;
            if (l1) {
                l1 = l1->next;
            }
            if (l2) {
                l2 = l2->next;
            }
        }
        if (carry > 0) {
            tail->next = new ListNode(carry);
        }
        return head;
    }
};
当然也有更短的写法
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode *dummy = new ListNode(-1);
        ListNode *cur = dummy;
        while(l1 || l2 || carry) {
            int val1 = l1 ? l1->val : 0;
            int val2 = l2 ? l2->val : 0;
            int val = val1 + val2 + carry;
            carry = val / 10;
            val = val % 10;
            cur->next = new ListNode(val);
            cur = cur->next;
            if(l1) l1 = l1->next;
            if(l2) l2 = l2->next;
        }
        return dummy->next;
    }
};

3. 无重复字符的最长子串
维护一个map
忘记应该用滑动窗口了，所以怎么做都不对
根据题解写出来的
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int hash[256]={0};
        int max=0,ans=0;
        for(int i=0,j=0;i<s.length()&&j<s.length();j++)
        {
            while(hash[s[j]]==1){
                hash[s[i]]=0;
                i++;
            }
            ans=j-i+1;
            hash[s[j]]=1;
            if(ans>max)
                max=ans;
        }
        return max;
    }
};

5. 最长回文子串
不会啊啊啊啊啊啊
有很多种解法嘛
可以使用动规
我不会动规5555
动规五部曲：
    （1）确定dp数组（dp table）以及下标的含义
        布尔类型的dp[i][j]：表示区间范围[i,j] （注意是左闭右闭）的子串是否是回文子串，如果是dp[i][j]为true，否则为false。
    （2）确定递推公式
        在确定递推公式时，就要分析如下几种情况。
        整体上是两种，就是s[i]与s[j]相等，s[i]与s[j]不相等这两种。
        当s[i]与s[j]不相等，那没啥好说的了，dp[i][j]一定是false。
        当s[i]与s[j]相等时，这就复杂一些了，有如下三种情况
        情况一：下标i 与 j相同，同一个字符例如a，当然是回文子串
        情况二：下标i 与 j相差为1，例如aa，也是文子串
        情况三：下标：i 与 j相差大于1的时候，例如cabac，此时s[i]与s[j]已经相同了，我们看i到j区间是不是回文子串就看aba是不是回文就可以了，那么aba的区间就是 i+1 与 j-1区间，这个区间是不是回文就看dp[i + 1][j - 1]是否为true。
        以上三种情况分析完了，那么递归公式如下：
        if (s[i] == s[j]) {
            if (j - i <= 1) { // 情况一 和 情况二
                dp[i][j] = true;
            } else if (dp[i + 1][j - 1]) { // 情况三
                dp[i][j] = true;
            }
        }
        注意这里我没有列出当s[i]与s[j]不相等的时候，因为在下面dp[i][j]初始化的时候，就初始为false。
        在得到[i,j]区间是否是回文子串的时候，直接保存最长回文子串的左边界和右边界，代码如下：
        if (s[i] == s[j]) {
            if (j - i <= 1) { // 情况一 和 情况二
                dp[i][j] = true;
            } else if (dp[i + 1][j - 1]) { // 情况三
                dp[i][j] = true;
            }
        }
        if (dp[i][j] && j - i + 1 > maxlenth) {
            maxlenth = j - i + 1;
            left = i;
            right = j;
        }
    （3）dp数组如何初始化
        dp[i][j]可以初始化为true么？ 当然不行，怎能刚开始就全都匹配上了。
        所以dp[i][j]初始化为false。
    （4）确定遍历顺序
        遍历顺序可有有点讲究了。
        首先从递推公式中可以看出，情况三是根据dp[i + 1][j - 1]是否为true，在对dp[i][j]进行赋值true的。
        dp[i + 1][j - 1] 在 dp[i][j]的左下角
        如果这矩阵是从上到下，从左到右遍历，那么会用到没有计算过的dp[i + 1][j - 1]，也就是根据不确定是不是回文的区间[i+1,j-1]，来判断了[i,j]是不是回文，那结果一定是不对的。
        所以一定要从下到上，从左到右遍历，这样保证dp[i + 1][j - 1]都是经过计算的。
        有的代码实现是优先遍历列，然后遍历行，其实也是一个道理，都是为了保证dp[i + 1][j - 1]都是经过计算的。
        代码如下：
        for (int i = s.size() - 1; i >= 0; i--) { // 注意遍历顺序
            for (int j = i; j < s.size(); j++) {
                if (s[i] == s[j]) {
                    if (j - i <= 1) { // 情况一 和 情况二
                        dp[i][j] = true;
                    } else if (dp[i + 1][j - 1]) { // 情况三
                        dp[i][j] = true;
                    }
                }
                if (dp[i][j] && j - i + 1 > maxlenth) {
                    maxlenth = j - i + 1;
                    left = i;
                    right = j;
                }
            }
        }
    （5）举例推导dp数组
        C++代码如下：
        class Solution {
        public:
            string longestPalindrome(string s) {
                vector<vector<int>> dp(s.size(), vector<int>(s.size(), 0));
                int maxlenth = 0;
                int left = 0;
                int right = 0;
                for (int i = s.size() - 1; i >= 0; i--) {
                    for (int j = i; j < s.size(); j++) {
                        if (s[i] == s[j]) {
                            if (j - i <= 1) { // 情况一 和 情况二
                                dp[i][j] = true;
                            } else if (dp[i + 1][j - 1]) { // 情况三
                                dp[i][j] = true;
                            }
                        }
                        if (dp[i][j] && j - i + 1 > maxlenth) {
                            maxlenth = j - i + 1;
                            left = i;
                            right = j;
                        }
                    }

                }
                return s.substr(left, right - left + 1);
            }
        };
 哎，我好菜
