6. N 字形变换
写了半天写得可复杂 结果还是溢出 烦死
看了题解
class Solution {
public:
    string convert(string s, int numRows) {
        int n = s.length(), r = numRows;
        if (r == 1 || r >= n) {
            return s;
        }
        int t = r * 2 - 2;
        int c = (n + t - 1) / t * (r - 1);
        vector<string> mat(r, string(c, 0));
        for (int i = 0, x = 0, y = 0; i < n; ++i) {
            mat[x][y] = s[i];
            if (i % t < r - 1) {
                ++x; // 向下移动
            } else {
                --x;
                ++y; // 向右上移动
            }
        }
        string ans;
        for (auto &row : mat) {
            for (char ch : row) {
                if (ch) {
                    ans += ch;
                }
            }
        }
        return ans;
    }
};

我写的是这样的
class Solution {
public:
    string convert(string s, int numRows) {
        int num=numRows*2-2;
        string ans;
        vector<string> mat(numRows,string(s.length()/num+s.length()%num-numRows,0));
        for(int i=0;i<s.length();i++)
        {
            if(i%num+1>numRows)
                mat[numRows*2-i%num-1][(i/num)*(num-numRows+1)+i%num-numRows+1]=s[i];
            else mat[i%num][(i/num)*(num-numRows+1)]=s[i];
        }
        for (int i=0;i<numRows;i++) {
            for (int j=0;j<s.length()/num+s.length()%num-numRows;j++) {
                if (mat[i][j]) {
                    ans += mat[i][j];
                }
            }
        }
        return ans;
    }
};
运算复杂不说，还是错的，不想搞清楚哪里写错了
大神用的行转向和列转向标志这个挺好用的
class Solution {
public:
    string convert(string s, int numRows) {
        if (numRows == 1) return s;
        vector<string> rows(numRows);
        // 行转向标志，极妙
        int flag = 1;  
        // 行下标索引
        int idxRows = 0;   
        for (int i = 0; i < s.size(); i++) {
            rows[idxRows].push_back(s[i]);
            // 更新行下标
            idxRows += flag;  
            if (idxRows == numRows - 1 || idxRows == 0) {
                // 转向，上——>下 | 下——>上
                flag = -flag;
            }
        }
        string res;
        for (auto row : rows) {
            // 拿到答案
            res += row;
        }
        return res;
    }
};

7. 整数反转
上道题把心态搞崩了，这道题想复杂了
评论区写的：
class Solution {
public:
    int reverse(int x) {
        long n=0;
        while(x){
            n=n*10+x%10;
            x/=10;
        }
        return n>INT_MAX ||n<INT_MIN ? 0:n;
    }
};
INT_MAX和INT_MIN要记好

8. 字符串转换整数 (atoi)
眼见着我的代码成为屎山代码...
class Solution {
public:
    int myAtoi(string s) {
        int flag=-1,flag2=1;
        string temp;
        long ans=0;
        if(s[0]!=' '&&(s[0]>'9'||s[0]<'0')&&s[0]!='-'&&s[0]!='+')
            return 0;
        for(int i=0;i<s.length();i++)
        {
            if(s[i]==' '&&flag2)
                continue;
            else if(s[i]=='-'&&flag==-1&&flag2)
                flag=1;
            else if(flag==-1&&s[i]=='+'){
                flag=0;
                flag2=0;
            }
            else if(s[i]>='0'&&s[i]<='9')
            {
                temp+=s[i];
                flag2=0;
            }
            else if(s[i]=='.')
                break;
            else break;
        }
        for(int i=0;i<temp.length();i++){
            if(ans*10<INT_MAX)
                ans=ans*10+(temp[i]-'0');
            else if(flag!=1)
                return INT_MAX;
            else return INT_MIN;
        }
        if(flag==1)
            ans=0-ans;
        if(ans>INT_MAX)
            return INT_MAX;
        if(ans<INT_MIN)
            return INT_MIN;
        return ans;
    }
};
中等题确实比简单题上了一个台阶哇......
其实这道题考察的是有限自动机DFA
用下面的表格来表示这个自动机：
            ' ' 	   +/- 	   number 	 other
start 	    start 	signed 	in_number 	end
signed 	    end 	   end 	  in_number 	end
in_number 	end 	   end 	  in_number 	end
end 	      end 	   end 	    end 	    end

接下来编程部分就非常简单了：我们只需要把上面这个状态转换表抄进代码即可。

class Automaton {
    string state = "start";
    unordered_map<string, vector<string>> table = {
        {"start", {"start", "signed", "in_number", "end"}},
        {"signed", {"end", "end", "in_number", "end"}},
        {"in_number", {"end", "end", "in_number", "end"}},
        {"end", {"end", "end", "end", "end"}}
    };

    int get_col(char c) {
        if (isspace(c)) return 0;
        if (c == '+' or c == '-') return 1;
        if (isdigit(c)) return 2;
        return 3;
    }
public:
    int sign = 1;
    long long ans = 0;

    void get(char c) {
        state = table[state][get_col(c)];
        if (state == "in_number") {
            ans = ans * 10 + c - '0';
            ans = sign == 1 ? min(ans, (long long)INT_MAX) : min(ans, -(long long)INT_MIN);
        }
        else if (state == "signed")
            sign = c == '+' ? 1 : -1;
    }
};

class Solution {
public:
    int myAtoi(string str) {
        Automaton automaton;
        for (char c : str)
            automaton.get(c);
        return automaton.sign * automaton.ans;
    }
};
