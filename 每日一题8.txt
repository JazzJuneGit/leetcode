34. 在排序数组中查找元素的第一个和最后一个位置
二分法
这一题是经典的二分搜索变种题。二分搜索有 4 大基础变种题：
1. 查找第一个值等于给定值的元素
2. 查找最后一个值等于给定值的元素
3. 查找第一个大于等于给定值的元素
4. 查找最后一个小于等于给定值的元素
根据大佬的想法，写出了代码
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        return {searchFirst(nums,target),searchLast(nums,target)};
    }
    int searchFirst(vector<int> nums,int target){
        int left=0,right=nums.size()-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(nums[mid]<target)
                left=mid+1;
            else if(nums[mid]>target)
                right=mid-1;
            else {
                if(mid==0||nums[mid-1]!=target)
                    return mid;
                right=mid-1;
            }
        }
        return -1;
    }
    int searchLast(vector<int> nums,int  target){
        int left=0,right=nums.size()-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(nums[mid]<target)
                left=mid+1;
            else if(nums[mid]>target)
                right=mid-1;
            else {
                if(mid==nums.size()-1||nums[mid+1]!=target)
                    return mid;
                left=mid+1;
            }
        }
        return -1;
    }
};

36. 有效的数独
知道是用哈希记录，但是脑袋乱乱的，不知道用什么样子的哈希记录
看了题解
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int col[9][9];
        int row[9][9];
        int box[3][3][9];

        memset(col,0,sizeof(col));
        memset(row,0,sizeof(row));
        memset(box,0,sizeof(box));
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                if(board[i][j]!='.'){
                    int index=board[i][j]-'0'-1;
                    row[i][index]++;
                    col[j][index]++;
                    box[i/3][j/3][index]++;
                    if (row[i][index] > 1 || col[j][index] > 1 || box[i / 3][j / 3][index] > 1) 
                        return false;
                }

            }
        }
        return true;
    }
};

38. 外观数列
一开始没看明白是递归，不过知道了之后就慢慢写出来了
class Solution {
public:
    string countAndSay(int n) {
        if(n==1)
            return "1";
        int num=0,last=-1;
        string s=countAndSay(n-1),ans;
        for(int i=0;i<s.length();i++)
        {
            if((s[i]-'0')==last)
                num++;
            else {
                if(last!=-1)
                    ans+=to_string(num)+to_string(last);
                last=s[i]-'0';
                num=1;
            }
        }
        ans+=to_string(num)+to_string(last);
        return ans;
    }
};
