39. 组合总和
看到这个题干的那一个瞬间 我的大脑就停止思考了（bushi
### 回朔法的思想： 回朔法的重要思想在于： 通过枚举法，对所有可能性进行遍历。 但是枚举的顺序是 一条路走到黑，发现黑之后，退一步，再向前尝试没走过的路。直到所有路都试过。因此回朔法可以简单的理解为： 走不通就退一步的方枚举法就叫回朔法。而这里回退点也叫做回朔点。
### 回朔关键点 通过分析发现，回朔法实现的三大技术关键点分别是：
    一条路走到黑
    回退一步
    另寻他路
### 关键点的实现 那么如何才能用代码实现上述三个关键点呢？
    for 循环
    递归
#### 解释如下
    for循环的作用在于另寻他路： 你可以用for循环可以实现一个路径选择器的功能，该路径选择器可以逐个选择当前节点下的所有可能往下走下去的分支路径。 例如： 现在你走到了节点a，a就像个十字路口，你从上面来到达了a，可以继续向下走。若此时向下走的路有i条，那么你肯定要逐个的把这i条都试一遍才行。而for的作用就是可以让你逐个把所有向下的i个路径既不重复，也不缺失的都试一遍
    递归可以实现一条路走到黑和回退一步： 一条路走到黑： 递归意味着继续向着for给出的路径向下走一步。 如果我们把递归放在for循环内部，那么for每一次的循环，都在给出一个路径之后，进入递归，也就继续向下走了。直到递归出口（走无可走）为止。 那么这就是一条路走到黑的实现方法。 递归从递归出口出来之后，就会实现回退一步。
因此for循环和递归配合可以实现回朔： 当递归从递归出口出来之后。上一层的for循环就会继续执行了。而for循环的继续执行就会给出当前节点下的下一条可行路径。而后递归调用，就顺着这条从未走过的路径又向下走一步。这就是回朔
说了这么多，回朔法的通常模板是什么呢？ 递归和for又是如何配合的呢？
#### 回朔代码模板
def backward():
    if (回朔点）：# 这条路走到底的条件。也是递归出口
        保存该结果
        return   
    else:
        for route in all_route_set :  逐步选择当前节点下的所有可能route
            if 剪枝条件：
                剪枝前的操作
                return   #不继续往下走了，退回上层，换个路再走
            else：#当前路径可能是条可行路径
                保存当前数据  #向下走之前要记住已经走过这个节点了。例如push当前节点
                self.backward() #递归发生，继续向下走一步了。
                回朔清理     # 该节点下的所有路径都走完了，清理堆栈，准备下一个递归。例如弹出当前节点

这里剪枝操作指的是： 对于有些问题，你走着走着，若某种情况发生了，你就已经直到不能继续往下走了，再走也没有用了。而这个情况就被称之为剪枝条件。
而DFS就是一个最典型的回朔法的应用。
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        dfs(candidates,target,0);
        return res;
    }
    void dfs(vector<int> candidates,int target,int cur)
    {
        if(target==0)
        {
            res.push_back(list);
            return;
        }
        for(int i=cur;i<candidates.size();i++)
        {
            if(candidates[i]>target)
                return;
            list.push_back(candidates[i]);
            dfs(candidates,target-candidates[i],i);
            list.pop_back();
        }
    }
    vector<vector<int>> res;
    vector<int> list;
};
抄的 

40. 组合总和 II
就...还是回溯法呗
主要关键点在去重
看了评论区才发现只要当前索引大于本层递归的起始索引，且等于前一个元素 就continue就行
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        dfs(candidates,target,0);
        return res;
    }
    void dfs(vector<int> candidates,int target,int cur)
    {
        if(target==0)
        {
            res.push_back(list);
            return;
        }
        for(int i=cur;i<candidates.size();i++)
        {
            if(candidates[i]>target)
                return;
            if(i>cur&&candidates[i]==candidates[i-1])
                continue;
            list.push_back(candidates[i]);
            dfs(candidates,target-candidates[i],i+1);
            list.pop_back();
        }
    }
    vector<vector<int>> res;
    vector<int> list;
};

43. 字符串相乘
大佬的思路
用数组模拟乘法。创建一个数组⻓度为 len(num1) + len(num2) 的数组用于存储乘积。对于任意 0 ≤ i < len(num1) ， 0 ≤ j < len(num2) ， num1[i] * num2[j] 的结果位于 tmp[i+j+1] ，如果 tmp[i+j+1]≥10 ，则将进位部分加到 tmp[i+j] 。最后，将数组 tmp 转成字符串，如果最高位是 0 则舍弃最高位。
根据大佬的思路写出：
class Solution {
public:
    string multiply(string num1, string num2) {
        if(num1=="0"||num2=="0")
            return "0";
        int size1=num1.size(),size2=num2.size();
        //int mul[size1+size2+1];
        auto mul = vector<int>(size1 + size2+1);
        string ans;
        for(int i=size1-1;i>=0;i--)
        {
            for(int j=size2-1;j>=0;j--)
            {
                int cur=(num1[i]-'0')*(num2[j]-'0');
                mul[i+j+1]+=cur;
                if(mul[i+j+1]>=10)
                {
                    mul[i+j]+=mul[i+j+1]/10;
                    mul[i+j+1]%=10;
                }
            }
        }
        for(int i=0;i<size1+size2;i++)
        {
            if(i==0&&mul[i]==0)
                continue;
            ans+=mul[i]+'0';
        }
        return ans;
    }
};

45. 跳跃游戏 II
嗯不知道怎么做
大佬说很自然地想到贪心算法：
扫描步数数组，维护当前能够到达最大下标的位置，记为能到达的最远边界，如果扫描过程中到达了最远边界，更新边界并将跳跃次数 + 1。
扫描数组的时候，其实不需要扫描最后一个元素，因为在跳到最后一个元素之前，能到达的最远边界一定大于等于最后一个元素的位置，不然就跳不到最后一个元素，到达不了终点了；如果遍历到最后一个元素，说明边界正好为最后一个位置，最终跳跃次数直接 + 1 即可，也不需要访问最后一个元素。
写半天答案不对 烦了，复制题解算了
class Solution {
public:
    int jump(vector<int>& nums) {
        int maxPos = 0, n = nums.size(), end = 0, step = 0;
        for (int i = 0; i < n - 1; ++i) {
            if (maxPos >= i) {
                maxPos = max(maxPos, i + nums[i]);
                if (i == end) {
                    end = maxPos;
                    ++step;
                }
            }
        }
        return step;
    }
};
